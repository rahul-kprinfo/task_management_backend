// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  lastLoginAt DateTime?
  active      Boolean  @default(true)
  sessionId   String?  @unique
  sessions    Session[] 
}

model Session {
  id        Int      @id @default(autoincrement())
  sessionId String   @unique // Ensure session IDs are unique
  userId    Int      // Foreign key referencing the user model
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) // Timestamp for when the session was created
}


model Project {
  id           Int      @id @default(autoincrement())
  projectName  String
  status       Boolean  @default(true) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tasks        Task[]
  projectUsers ProjectUser[]
}

model Task {
  id          Int      @id @default(autoincrement())
  taskName    String
  description String?
  priority    String
  user        String
  taskStatus  String
  projectUserId  Int
  parentTaskId   Int?
  childTaskId   Int[]
  estimation  String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int
  project     Project  @relation(fields: [projectId], references: [id])
  rojectUser     ProjectUser  @relation(fields: [projectUserId], references: [id])
  comments    Comment[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  taskId     Int       // This field references the Task model
  task       Task      @relation(fields: [taskId], references: [id]) // Many-to-one relationship: Many comments belong to one task
}

model ProjectUser {
  id       Int      @id @default(autoincrement())
  name     String
  email    String
  role     String
  status   Boolean  @default(true) 
  tasks        Task[]
  projectId Int
  project Project @relation(fields: [projectId], references: [id])
}

